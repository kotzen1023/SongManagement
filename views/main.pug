doctype html
head
  meta(charset='utf-8')
  meta(name='viewport' content='width=device-width,minimum-scale=1')
  title Main
  link(rel='stylesheet' href='https://cdn.datatables.net/1.11.3/css/jquery.dataTables.min.css')
  //script(src='https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/jszip.js')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/xlsx.js')

  
  script(src='https://code.jquery.com/jquery-3.5.1.js')
  script(src='https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js')

  script(type='text/javascript' src='https://unpkg.com/xlsx@0.15.1/dist/xlsx.full.min.js')
  //script(src='/javascripts/FileSaver.js')
  //script(src='/javascripts/jhxlsx.js')
  script(type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.1/xlsx.full.min.js')
  script.
    var songObj = null;
    var songObj_by_version = [];
    var file_name_version = "";
    var ExcelToJSON = function() {
      this.parseExcel = function(file) {
        var reader = new FileReader();
        reader.onload = function(e) {
          var data = e.target.result;
          var workbook = XLSX.read(data, {
            type: 'binary'
          });
          workbook.SheetNames.forEach(function(sheetName) {
            // Here is your object
            var XL_row_object = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
            var json_object = JSON.stringify(XL_row_object);

            var count = Object.keys(XL_row_object).length;

            var upload_song_obj = [];
            for (var i=0; i<count; i++) {
              var new_obj = XL_row_object[i];
              //console.log("new_obj["+i+"] = "+new_obj['Idx']);
              //remove column 'Idx'
              new_obj.VersionName = file_name_version; 
              //console.log("obj = "+obj['Idx']);
              upload_song_obj.push(new_obj);
            }

            //console.log(JSON.parse(json_object));
            jQuery( '#xlx_json' ).val( json_object );

            var currentLocation = window.location;
            var url = currentLocation+"upload";
            var xhr = new XMLHttpRequest();
            
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    //var json = JSON.parse(xhr.responseText);
                    //console.log(json.email + ", " + json.password);
                    console.log("success!");
                    location.reload();
                }
            };
            //var data = JSON.stringify({"email": "hey@mail.com", "password": "101010"});
            //xhr.send(upload_song_obj);
            xhr.send(JSON.stringify(upload_song_obj));



          })
        };
        reader.onerror = function(ex) {
          console.log(ex);
        };
        reader.readAsBinaryString(file);
      };
    };
    function handleFileSelect(evt) {
      
      
      var files = evt.target.files; // FileList object
      //console.log("file_name = "+files[0].name);
      file_name_version = files[0].name.split('.')[0];
      console.log("file_name_version = "+file_name_version);
      var xl2json = new ExcelToJSON();
      xl2json.parseExcel(files[0]);
    }

    function ExportToExcel(type, fn, dl) {
      /*var elt = document.getElementById('tableArray');
       var wb = XLSX.utils.table_to_book(elt, { sheet: "sheet1" });
       return dl ?
         XLSX.write(wb, { bookType: type, bookSST: true, type: 'base64' }):
         XLSX.writeFile(wb, fn || ('MySheetName.' + (type || 'xlsx')));
      */
      

      //console.log("songObj = "+songObj[0]['Name']);
      /*
      var tabularData = [{
        "sheetName":"Sheet1",
        "data": songObj
      }];

      var options = {
        fileName:"File Name"
      };
      Jhxlsx.export(tabularData, options);
      */
      var machine = document.getElementById('machine_select').value;
      var current_select_version = document.getElementById('version_select').value;
      

      

      var new_song_obj = [];

      if (current_select_version != "全部歌曲" && songObj_by_version.length > 0) {
        var count = songObj_by_version.length;
        console.log("songObj_by_version.length = "+count);
        for (var i=0; i<count; i++) {
          //var new_obj = songObj_by_version[i];
          var new_obj = Object.assign({}, songObj_by_version[i]);
          //console.log("new_obj["+i+"] = "+new_obj['Idx']);
          //remove column 'Idx'
          delete new_obj.Idx;
          delete new_obj.VersionName;

          if (machine == 1) {// for 239 plus
            new_obj["编号"] = new_obj.Id;
            new_obj["*歌曲编号"] = new_obj.SongNum;
            new_obj["*歌曲名称"] = new_obj.Name;
            new_obj["歌名首拼"] = new_obj.FirstSpell;
            new_obj["歌名全拼"] = new_obj.AllSpell;
            new_obj["*歌星名称"] = new_obj.SingerName;
            new_obj["*歌曲语言"] = new_obj.SongLanguageId;
            new_obj["*歌曲类型"] = new_obj.SongTypeId;
            new_obj["*歌曲音轨"] = new_obj.Track;
            new_obj["*歌曲格式"] = new_obj.Format;
            new_obj["*存放路径"] = new_obj.SavePath;
            new_obj["*下载路径"] = new_obj.DownPath;
            new_obj["歌曲版本"] = new_obj.Version;
            new_obj["下载地址1"] = new_obj.DownUrl1;
            new_obj["下载地址2"] = new_obj.DownUrl2;
            new_obj["下载地址3"] = new_obj.DownUrl3;
            new_obj["备用下载地址"] = new_obj.BackDownUrl;
            delete new_obj.Id;
            delete new_obj.SongNum;
            delete new_obj.Name;
            delete new_obj.FirstSpell;
            delete new_obj.AllSpell;
            delete new_obj.SingerName;
            delete new_obj.SongLanguageId;
            delete new_obj.SongTypeId;
            delete new_obj.Track;
            delete new_obj.Format;
            delete new_obj.SavePath;
            delete new_obj.DownPath;
            delete new_obj.Version;
            delete new_obj.DownUrl1;
            delete new_obj.DownUrl2;
            delete new_obj.DownUrl3;
            delete new_obj.BackDownUrl;

            delete new_obj.SingerId;
            delete new_obj.NameLength;
            delete new_obj.Hits;
            delete new_obj.ServerState;
            delete new_obj.Image;
            delete new_obj.ShowHidden;
            delete new_obj.Sort;
            delete new_obj.AddTime;
            delete new_obj.UpdateTime;
            delete new_obj.DownCount;
            delete new_obj.FileMd5;

            new_song_obj.push(new_obj);
          } else {
            new_song_obj.push(new_obj);
          }
        }
      } else {
        var count = Object.keys(songObj).length;
        console.log("songObj count = "+count);
        for (var i=0; i<count; i++) {
          //var new_obj = songObj[i];
          var new_obj = Object.assign({}, songObj[i]);
          //console.log("new_obj["+i+"] = "+new_obj['Idx']);
          //remove column 'Idx'
          delete new_obj.Idx;
          delete new_obj.VersionName;
          //console.log("obj = "+obj['Idx']);
          if (machine == 1) {// for 239 plus
            new_obj["编号"] = new_obj.Id;
            new_obj["*歌曲编号"] = new_obj.SongNum;
            new_obj["*歌曲名称"] = new_obj.Name;
            new_obj["歌名首拼"] = new_obj.FirstSpell;
            new_obj["歌名全拼"] = new_obj.AllSpell;
            new_obj["*歌星名称"] = new_obj.SingerName;
            new_obj["*歌曲语言"] = new_obj.SongLanguageId;
            new_obj["*歌曲类型"] = new_obj.SongTypeId;
            new_obj["*歌曲音轨"] = new_obj.Track;
            new_obj["*歌曲格式"] = new_obj.Format;
            new_obj["*存放路径"] = new_obj.SavePath;
            new_obj["*下载路径"] = new_obj.DownPath;
            new_obj["歌曲版本"] = new_obj.Version;
            new_obj["下载地址1"] = new_obj.DownUrl1;
            new_obj["下载地址2"] = new_obj.DownUrl2;
            new_obj["下载地址3"] = new_obj.DownUrl3;
            new_obj["备用下载地址"] = new_obj.BackDownUrl;
            delete new_obj.Id;
            delete new_obj.SongNum;
            delete new_obj.Name;
            delete new_obj.FirstSpell;
            delete new_obj.AllSpell;
            delete new_obj.SingerName;
            delete new_obj.SongLanguageId;
            delete new_obj.SongTypeId;
            delete new_obj.Track;
            delete new_obj.Format;
            delete new_obj.SavePath;
            delete new_obj.DownPath;
            delete new_obj.Version;
            delete new_obj.DownUrl1;
            delete new_obj.DownUrl2;
            delete new_obj.DownUrl3;
            delete new_obj.BackDownUrl;

            delete new_obj.SingerId;
            delete new_obj.NameLength;
            delete new_obj.Hits;
            delete new_obj.ServerState;
            delete new_obj.Image;
            delete new_obj.ShowHidden;
            delete new_obj.Sort;
            delete new_obj.AddTime;
            delete new_obj.UpdateTime;
            delete new_obj.DownCount;
            delete new_obj.FileMd5;

            new_song_obj.push(new_obj);
          } else {
            new_song_obj.push(new_obj);
          }
        }
      }

      
      var filename = current_select_version+".xlsx";

      //filename='reports.xlsx';
      var ws = XLSX.utils.json_to_sheet(new_song_obj);
      new_song_obj = [];
      //ws['!cols'] = [];
      //ws['!cols'][0] = { hidden: true };
      //delete (ws['A']);
      var wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, "Song_Song");
      XLSX.writeFile(wb,filename,{compression:true});
      ws = null;
    }

    function editSong(id) {
      console.log("id = "+id);
    }

    function onVersionChange(selectObject) {

      document.getElementById('txt_loading').style.visibility = 'visible';
      
      var value = selectObject.value;
      var value_array = value.split(',');
      
      if (value == "全部歌曲") {
        $('#tableArray').dataTable().fnClearTable();
        $('#tableArray').dataTable().fnAddData(songObj);
      } else {
        //var filter_data = [];
        var obj_size = Object.keys(songObj).length;
        console.log("onVersionChange obj_size = "+obj_size);
        songObj_by_version = [];
        for (var i=0; i<obj_size; i++) {

          for (var j=0;j<value_array.length; j++) {
            if (songObj[i]['VersionName'].includes(value_array[j]))
            //if (value.includes(songObj[i]['VersionName']))
            {
              songObj_by_version.push(songObj[i]);
              break;
            }
          }
          
        }
        console.log("songObj_by_version.length = "+songObj_by_version.length);

        $('#tableArray').dataTable().fnClearTable();
        $('#tableArray').dataTable().fnAddData(songObj_by_version);

      }
      
      document.getElementById('txt_loading').style.visibility = "hidden";
    }

    function onMachineChange(selectObject) {
      var value = selectObject.value;
      console.log("machine select = "+value);
    }

    function deleteAll() {

      if (confirm('確定刪除所有歌曲?(可以再以excel檔案重新匯入)')) {
        // Save it!
        var currentLocation = window.location;
      
        var url = currentLocation+"deleteAll";
        console.log("url = "+url);
        var xhr = new XMLHttpRequest();
        var post_str = "delete=true"
        xhr.open("POST", url, true);
        //xhr.setRequestHeader("Content-Type", "application/json");
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
                //var json = JSON.parse(xhr.responseText);
                //console.log(json.email + ", " + json.password);
                console.log("success!");
                location.reload();
            }
        };
        //var data = JSON.stringify({"email": "hey@mail.com", "password": "101010"});
        //xhr.send(upload_song_obj);
        xhr.send(post_str);
      } else {
        // Do nothing!
        
      } 
    }

    function addNew() {
      var currentLocation = window.location;
      var url = currentLocation+"addsong";
      
      location.replace(url);
    }
  
bodyngObj
h1(align='center') 全部歌曲

//input(type='button' value='刪除全部歌曲' onclick='deleteAll()')
//input#input(type='file')

    
form(align='center' enctype='multipart/form-data')
  
  span(style='padding:0px 20px 0px 0px;')
   input(type='button' value='新增歌曲' onclick='addNew()')

  span(style='padding:0px 20px 0px 0px;')
   input(type='button' value='刪除全部歌曲' onclick='deleteAll()')

  span(style='padding:0px 20px 0px 0px;') 匯入Excel  
   input#upload(type='file' name='files[]')
   input(type='button' value='匯出excel' onclick='ExportToExcel()')
  
  span#span_version_select(style='padding:0px 20px 0px 0px;')
   select#version_select

  span#span_machine_select(style='padding:0px 20px 0px 0px;') 機型選取
   select#machine_select

  div#txt_loading 讀取中
   img#img_loading(src='/images/loading-gif.gif' width='20')

script.
  document.getElementById('upload').addEventListener('change', handleFileSelect, false);
hr

p#firstSpellZero
p#allSpellZero

hr

p#goods(align='center')
  table#tableArray.table.table-striped.table-bordered.dt-responsive.nowrap.display(style='width:100%')
    

script.
  //loading show
  document.getElementById('txt_loading').style.visibility = 'visible';
  

  var currentLocation = window.location;
  //console.log("currentLocation = "+currentLocation);
  var main_url = currentLocation+"main";
  console.log("main_url = "+main_url);
  
  $(document).ready(function() {
    //var songObj;
    var dt;
    var select_option_array = [];
    getdata();
    function getdata() {
      const getSongs = async () => {
        console.log("getSongs");
        const data = await fetch(main_url, {
          method: 'GET',
          headers: {
              'Content-Type': 'application/json',                                  
          }
        });
        const jsondata = await data.json();
        //console.log("jsondata = "+jsondata);
        songObj=jsondata;
        var count = Object.keys(songObj).length;
        var firstSpellZeroCount = 0;
        var allSpellZeroCount = 0;

        for (var i=0; i<count; i++) {
          if (select_option_array.length == 0) {
            console.log("select_option_array.length = "+select_option_array.length);
            //select_option_array.push(songObj[i]['VersionName']);

            //check if contain ","
            if (songObj[i]['VersionName'].includes(",")) {
              var option_array = songObj[i]['VersionName'].split(",");
              for (j=0;j<option_array.length; j++) {
                select_option_array.push(option_array[j]);
              }
            } else {
              select_option_array.push(songObj[i]['VersionName']);
            }

          } else {
            var found = false;
            for (j=0;j<select_option_array.length; j++) {
              if (select_option_array[j] == songObj[i]['VersionName']) {
                found = true;
                break;
              } 
            }

            if (!found) {
              //select_option_array.push(songObj[i]['VersionName']);

              if (songObj[i]['VersionName'].includes(",")) {
                var option_array = songObj[i]['VersionName'].split(",");
                
                for (var k=0;k<option_array.length; k++) {
                  var found_option = false;
                  for (var z=0;z<select_option_array.length; z++) {
                    if (option_array[k] == select_option_array[z]) {
                      found_option = true;
                      break;
                    }
                  }

                  if (!found_option) {
                    select_option_array.push(option_array[k]);
                  }

                
                }
              } else {
                select_option_array.push(songObj[i]['VersionName']);
              }
            }
          }

          if (songObj[i]['FirstSpell'] == "") {
            firstSpellZeroCount += 1;
          }

          if (songObj[i]['AllSpell'] == "") {
            allSpellZeroCount += 1;
          } 
        }
        
        if (firstSpellZeroCount > 0) {
          var firstSpellZeroObj = document.getElementById('firstSpellZero');
          firstSpellZeroObj.innerHTML = "FirstSpell 空白數量: ";
          firstSpellZeroObj.innerHTML += firstSpellZeroCount
        }

        if (allSpellZeroCount > 0) {
          var allSpellZeroObj = document.getElementById('allSpellZero');
          allSpellZeroObj.innerHTML = "AllSpell 空白數量: ";
          allSpellZeroObj.innerHTML += allSpellZeroCount
        }
        
        //sort

        select_option_array = select_option_array.sort();
        
        if (select_option_array.length > 0) {
          var combine_str = "全部歌曲";
          /*for (var i=0;i<select_option_array.length; i++) {
            if (i==0) {
              combine_str += select_option_array[i];
            } else {
              combine_str += ","+select_option_array[i];
            }
          }*/
          //insert the combine string to the first of the select_option_array
          select_option_array.splice(0, 0, combine_str);
        }
        

        console.log("select_option_array = "+select_option_array);

        var span_version_select = document.getElementById('span_version_select');
        var innerHtmlString = "<select id='version_select' onchange='onVersionChange(this)'>";
        for (var k=0; k<select_option_array.length; k++) {
          innerHtmlString += "<option value='"+select_option_array[k]+"'>"+select_option_array[k]+"</option>";
        }
        innerHtmlString += "</select>";
        span_version_select.innerHTML = innerHtmlString;


        var span_machine_select = document.getElementById('span_machine_select');
        var innerString = "機型選取<select id='machine_select' onchange='onMachineChange(this)'>";
       
        innerString += "<option value='0'>239</option>";
        innerString += "<option value='1'>239 plus</option>";
        
        innerString += "</select>";
        span_machine_select.innerHTML = innerString;

        initialiseTable();
        return jsondata;
      };
      getSongs();
    }

    function initialiseTable(){
      dt = $('#tableArray').DataTable({
        "paging": true,
        "data": songObj,
        "columns": [
          { data: null ,title: "操作功能",  // 這邊是欄位
            render: function (data, type, row) {
              return '<button type="button" class="btn btn-warning btn-sm">編輯</button> ' +
                      '<button type="button" class="btn btn-danger btn-sm">刪除</button>'
              } 
          },
          { data: 'Idx', title: "Idx" },
          { data: 'Id', title: "Id" },
          { data: 'SongNum', title: "SongNum" },
          { data: 'Name', title: "Name" },
          { data: 'SingerName', title: "SingerName" },
          { data: 'SingerId', title: "SingerId" },
          { data: 'SongLanguageId', title: "SongLanguageId" },
          { data: 'SongTypeId', title: "SongTypeId" },
          { data: 'Track', title: "Track" },
          { data: 'FirstSpell', title: "FirstSpell" },
          { data: 'AllSpell', title: "AllSpell" },
          { data: 'NameLength', title: "NameLength" },
          { data: 'Hits', title: "Hits" },
          { data: 'Format', title: "Format" },
          { data: 'ServerState', title: "ServerState" },
          { data: 'Image', title: "Image" },
          { data: 'SavePath', title: "SavePath" },
          { data: 'DownPath', title: "DownPath" },
          { data: 'Version', title: "Version" },
          { data: 'DownUrl1', title: "DownUrl1", render: function (data, type, row, meta) {
              if (type === "display") {
                  data = '<a href="' + data + '" target="_blank">' + data + '</a>';
              }
              return data;
            } 
          },
          { data: 'DownUrl2', title: "DownUrl2", render: function (data, type, row, meta) {
              if (type === "display") {
                  data = '<a href="' + data + '" target="_blank">' + data + '</a>';
              }
              return data;
            } 
          },
          { data: 'DownUrl3', title: "DownUrl3", render: function (data, type, row, meta) {
              if (type === "display") {
                  data = '<a href="' + data + '" target="_blank">' + data + '</a>';
              }
              return data;
            } 
          },
          { data: 'BackDownUrl', title: "BackDownUrl", render: function (data, type, row, meta) {
              if (type === "display") {
                  data = '<a href="' + data + '" target="_blank">' + data + '</a>';
              }
              return data;
            } 
          },
          { data: 'FileMd5', title: "FileMd5" },
          { data: 'ShowHidden', title: "ShowHidden" },
          { data: 'Sort', title: "Sort" },
          { data: 'AddTime', title: "AddTime" },
          { data: 'UpdateTime', title: "UpdateTime" },
          { data: 'DownCount', title: "DownCount" },
          { data: 'VersionName', title: "VersionName" },
        ],
        language: {
          "lengthMenu": "顯示 _MENU_ 筆資料",
          "sProcessing": "處理中...",
          "sZeroRecords": "没有匹配结果",
          "sInfo": "目前有 _MAX_ 筆資料",
          "sInfoEmpty": "目前共有 0 筆紀錄",
          "sInfoFiltered": " ",
          "sInfoPostFix": "",
          "sSearch": "搜尋:",
          "sUrl": "",
          "sEmptyTable": "尚未有資料紀錄存在",
          "sLoadingRecords": "載入資料中...",
          "sInfoThousands": ",",
          "oPaginate": {
              "sFirst": "首頁",
              "sPrevious": "上一頁",
              "sNext": "下一頁",
              "sLast": "末頁"
          },
          "order": [[0, "desc"]],
          "oAria": {
              "sSortAscending": ": 以升序排列此列",
              "sSortDescending": ": 以降序排列此列"
          }
        },
        "lengthMenu": [ [10, 25, 50, 100], [10, 25, 50, 100] ],
      });


      //loading hide
      document.getElementById('txt_loading').style.visibility = "hidden";

      //on edit button click
      $('#tableArray tbody').on( 'click', 'button.btn-warning', function () {
        var tr = $(this).closest('tr');
        var value = $(tr).find('td').eq(2)[0].innerHTML;
        //alert(value);

        var currentLocation = window.location;
        var url = currentLocation+"editsong";
        var xhr = new XMLHttpRequest();

        var json_object = `{ "SongNum": "`+value+`" }`;
        
        let new_url = url+"?SongNum="+value;
        location.replace(new_url);

      });
      //on delete button click
      $('#tableArray tbody').on( 'click', 'button.btn-danger', function () {
        var tr = $(this).closest('tr');
        var value = $(tr).find('td').eq(2)[0].innerHTML;
        //alert(value);

        var currentLocation = window.location;
        var url = currentLocation+"deletesong";
        var xhr = new XMLHttpRequest();

        var json_object = `{ "SongNum": "`+value+`" }`;
        
        let new_url = url+"?SongNum="+value;
        location.replace(new_url);
      });

      //hide Idx column
      dt.column(1).visible(false);
    }
  });                    
  

  
  /*
  const xmlhttp = new XMLHttpRequest();
  xmlhttp.onload = function() {
    //console.log("this.responseText = "+this.responseText);
    if (this.responseText != "No Data!") {
      
      songObj = JSON.parse(this.responseText);
      //console.log("songObj = "+songObj);
      var count = Object.keys(songObj).length;
      var select_option_array = [];
      for (var i=0; i<count; i++) {
        if (select_option_array.length == 0) {
          console.log("select_option_array.length = "+select_option_array.length);
          //select_option_array.push(songObj[i]['VersionName']);

          //check if contain ","
          if (songObj[i]['VersionName'].includes(",")) {
            var option_array = songObj[i]['VersionName'].split(",");
            for (j=0;j<option_array.length; j++) {
              select_option_array.push(option_array[j]);
            }
          }

        } else {
          var found = false;
          for (j=0;j<select_option_array.length; j++) {
            if (select_option_array[j] == songObj[i]['VersionName']) {
              found = true;
              break;
            } 
          }

          if (!found) {
            //select_option_array.push(songObj[i]['VersionName']);

            if (songObj[i]['VersionName'].includes(",")) {
              var option_array = songObj[i]['VersionName'].split(",");
              
              for (var k=0;k<option_array.length; k++) {
                var found_option = false;
                for (var z=0;z<select_option_array.length; z++) {
                  if (option_array[k] == select_option_array[z]) {
                    found_option = true;
                    break;
                  }
                }

                if (!found_option) {
                  select_option_array.push(option_array[k]);
                }

               
              }

              
            }
          }
        }
      }
      //sort 
      select_option_array = select_option_array.sort();
      
      var combine_str = "";
      for (var i=0;i<select_option_array.length; i++) {
        if (i==0) {
          combine_str += select_option_array[i];
        } else {
          combine_str += ","+select_option_array[i];
        }
      }
      //insert the combine string to the first of the select_option_array
      select_option_array.splice(0, 0, combine_str);

      console.log("select_option_array = "+select_option_array);

      var span_version_select = document.getElementById('span_version_select');
      var innerHtmlString = "<select id='version_select' onchange='onVersionChange(this)'>";
      for (var k=0; k<select_option_array.length; k++) {
        innerHtmlString += "<option value='"+select_option_array[k]+"'>"+select_option_array[k]+"</option>";
      }
      innerHtmlString += "</select>";
      span_version_select.innerHTML = innerHtmlString;

      $(document).ready(function() {
        var dt = $('#tableArray').DataTable({
          "data": songObj,
          
          "columns": [
            { data: null ,title: "操作功能",  // 這邊是欄位
              render: function (data, type, row) {
                return '<button type="button" class="btn btn-warning btn-sm">編輯</button> ' +
                        '<button type="button" class="btn btn-danger btn-sm">刪除</button>'
                } 
            },
            { data: 'Idx', title: "Idx" },
            { data: 'Id', title: "Id" },
            { data: 'SongNum', title: "SongNum" },
            { data: 'Name', title: "Name" },
            { data: 'SingerName', title: "SingerName" },
            { data: 'SingerId', title: "SingerId" },
            { data: 'SongLanguageId', title: "SongLanguageId" },
            { data: 'SongTypeId', title: "SongTypeId" },
            { data: 'Track', title: "Track" },
            { data: 'FirstSpell', title: "FirstSpell" },
            { data: 'AllSpell', title: "AllSpell" },
            { data: 'NameLength', title: "NameLength" },
            { data: 'Hits', title: "Hits" },
            { data: 'Format', title: "Format" },
            { data: 'ServerState', title: "ServerState" },
            { data: 'Image', title: "Image" },
            { data: 'SavePath', title: "SavePath" },
            { data: 'DownPath', title: "DownPath" },
            { data: 'Version', title: "Version" },
            { data: 'DownUrl1', title: "DownUrl1", render: function (data, type, row, meta) {
                if (type === "display") {
                    data = '<a href="' + data + '" target="_blank">' + data + '</a>';
                }
                return data;
              } 
            },
            { data: 'DownUrl2', title: "DownUrl2", render: function (data, type, row, meta) {
                if (type === "display") {
                    data = '<a href="' + data + '" target="_blank">' + data + '</a>';
                }
                return data;
              } 
            },
            { data: 'DownUrl3', title: "DownUrl3", render: function (data, type, row, meta) {
                if (type === "display") {
                    data = '<a href="' + data + '" target="_blank">' + data + '</a>';
                }
                return data;
              } 
            },
            { data: 'BackDownUrl', title: "BackDownUrl", render: function (data, type, row, meta) {
                if (type === "display") {
                    data = '<a href="' + data + '" target="_blank">' + data + '</a>';
                }
                return data;
              } 
            },
            { data: 'FileMd5', title: "FileMd5" },
            { data: 'ShowHidden', title: "ShowHidden" },
            { data: 'Sort', title: "Sort" },
            { data: 'AddTime', title: "AddTime" },
            { data: 'UpdateTime', title: "UpdateTime" },
            { data: 'DownCount', title: "DownCount" },
            { data: 'VersionName', title: "VersionName" },
          ],
          language: {
            "lengthMenu": "顯示 _MENU_ 筆資料",
            "sProcessing": "處理中...",
            "sZeroRecords": "没有匹配结果",
            "sInfo": "目前有 _MAX_ 筆資料",
            "sInfoEmpty": "目前共有 0 筆紀錄",
            "sInfoFiltered": " ",
            "sInfoPostFix": "",
            "sSearch": "搜尋:",
            "sUrl": "",
            "sEmptyTable": "尚未有資料紀錄存在",
            "sLoadingRecords": "載入資料中...",
            "sInfoThousands": ",",
            "oPaginate": {
                "sFirst": "首頁",
                "sPrevious": "上一頁",
                "sNext": "下一頁",
                "sLast": "末頁"
            },
            "order": [[0, "desc"]],
            "oAria": {
                "sSortAscending": ": 以升序排列此列",
                "sSortDescending": ": 以降序排列此列"
            }
          },
          "lengthMenu": [ [10, 25, 50, 100], [10, 25, 50, 100] ],
        })

        //loading hide
        document.getElementById('txt_loading').style.visibility = "hidden";

        //on edit button click
        $('#tableArray tbody').on( 'click', 'button.btn-warning', function () {
          var tr = $(this).closest('tr');
          var value = $(tr).find('td').eq(2)[0].innerHTML;
          //alert(value);

          var currentLocation = window.location;
          var url = currentLocation+"editsong";
          var xhr = new XMLHttpRequest();

          var json_object = `{ "SongNum": "`+value+`" }`;
          
          let new_url = url+"?SongNum="+value;
          location.replace(new_url);

        });
        //on delete button click
        $('#tableArray tbody').on( 'click', 'button.btn-danger', function () {
          var tr = $(this).closest('tr');
          var value = $(tr).find('td').eq(2)[0].innerHTML;
          //alert(value);

          var currentLocation = window.location;
          var url = currentLocation+"deletesong";
          var xhr = new XMLHttpRequest();

          var json_object = `{ "SongNum": "`+value+`" }`;
          
          let new_url = url+"?SongNum="+value;
          location.replace(new_url);
        });

        //hide Idx column
        dt.column(1).visible(false);
      });

      
    } else {
      document.getElementById('txt_loading').style.visibility = "hidden";
      var noData = document.getElementById('goods');
      noData.innerHTML = "沒有任何資料";
    }
  }
  xmlhttp.open("GET", main_url, true);
  xmlhttp.send();
  */
  


  
